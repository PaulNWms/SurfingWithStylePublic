Every object should have a ____, which should be entirely encapsulated by that object. 
Single Responsibility Principle

There should never be more than one reason for a class to change.
Single Responsibility Principle

Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.
Open / Closed Principle

The Open / Closed Principle is achieved with
interfaces
abstract base classes
parameters

If the module changes once, accept it.  If it changes a second time, refactor.
Open / Closed Principle

No design can be closed against all changes
Open / Closed Principle

Subtypes must be substitutable for their base types.
Liskov Substitution Principle

Client code expects child classes to work in place of their base classes
Liskov Substitution Principle

conditional based on object type (especially inside a loop) smells like a violation of 
Liskov Substitution Principle

partially implemented interfaces/base classes smells like a violation of 
Liskov Substitution Principle

Clients should not be forced to depend on methods they do not use.
Interface Segregation Principle

Keep interfaces lean and focused.
Interface Segregation Principle

Refactor large interfaces so they inherit smaller interfaces.
Interface Segregation Principle

High-level modules should not depend on low-level modules.  Both should depend on abstractions. 
Dependency Inversion Principle

Abstractions should not depend on details.  Details should depend on abstractions
Dependency Inversion Principle

The Hollywood Principle - "Don’t call us; we’ll call you"
Dependency Inversion Principle

Dependency Inversion Principle - Three Primary Techniques
Constructor Injection (Strategy pattern)
Property Injection
Parameter Injection

new keyword smells like a violation of
Dependency Inversion Principle

static methods & properties (DateTime.Now) smell like a violation of
Dependency Inversion Principle
Don't Repeat Yourself

Magic strings & values
Don't Repeat Yourself

Duplicate logic violates
Don't Repeat Yourself

Repeated if-then logic violates
Don't Repeat Yourself

Conditional instead of polymorphism
Don't Repeat Yourself

Static Methods violate DRY because they are
tightly coupled
difficult to test
difficult to change (violates OCP)
cannot use OOP

Template Method Pattern, Command Pattern, Dependency Inversion Principle implement ____
Don't Repeat Yourself

Repetition in Process 
Don't Repeat Yourself

There should never be more than one reason for a class to change.
SRP

How strongly-related and focused are the various responsibilities of a module:
cohesion

The degree to which each program module relies on each one of the other modules:
coupling

A difference in usage scenarios from the client’s perspective
responsibility

Multiple small interfaces (follow ISP) can help to achieve
SRP

Following _____ leads to lower coupling and higher cohesion
SRP

Entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.
OCP

Rely on abstractions
OCP

In .NET, abstractions include:
Interfaces
Abstract Base Classes

In procedural code, some level of OCP can be achieved via
parameters

We want to avoid introducing changes that cascade through many modules in our application
OCP

Approaches to Achieve OCP
Parameters (Procedural Programming)
Inheritance / Template Method Pattern
Composition / Strategy Pattern

When do we apply OCP?
Experience Tells You
Otherwise – Don’t apply OCP at first
OCP adds complexity to design
No design can be closed against all changes

Subtypes must be substitutable for their base types.
LSP

LSP: Child classes must not
Remove base class behavior
Violate base class invariants

LSP: Non-substitutable code breaks
polymorphism

LSP: “Tell, Don’t Ask”
Don’t interrogate objects for their internals – move behavior to the object
Tell the object what you want it to do

Clients should not be forced to depend on methods they do not use.
ISP

When do we fix ISP?
Once there is pain (If there is no pain, there’s no problem to address.)

ISP: If you find yourself depending on a “fat” interface you own
Create a smaller interface with just what you need
Have the fat interface implement your new interface
Reference the new interface with your code

If you find “fat” interfaces are problematic but you do not own them
Create a smaller interface with just what you need
Implement this interface using an Adapter that implements the full interface

ISP Tips
Keep interfaces small, cohesive, and focused
Whenever possible, let the client define the interface
Whenever possible, package the interface with the client
- Alternately, package in a third assembly client and implementation both depend upon
- Last resort: Package interfaces with their implementation

High-level modules should not depend on low-level modules.
DIP

Abstractions should not depend on details. Details should depend on abstractions.
DIP

Dependencies that can make unit testing difficult
Clock
Thread.Sleep
Random

DIP: Class constructors should
require any dependencies the class needs

Dependency Injection is a technique that is used to allow calling code to
inject the dependencies a class needs when it is instantiated.

DIP: The Hollywood Principle
“Don’t call us; we’ll call you”

DIP: Three Primary Techniques
Constructor Injection
Property Injection
Parameter Injection

DIP: Where do we instantiate objects?
Default Constructor - Referred to as “poor man’s dependency injection” or “poor man’s IoC”
Main
IoC Container

Magic Strings/Values are a
DRY smell

Duplicate logic in multiple locations are a
DRY smell

Repeated if-then logic are a
DRY smell

Conditionals instead of polymorphism are a
DRY smell

Repeated Execution Patterns are a
DRY smell

Lots of duplicate, probably copy-pasted, code are a
DRY smell

Only manual tests are a
DRY smell

Static methods everywhere are a
DRY smell

DRY: Repetition in Process
Testing - Performing testing by hand is tedious and wasteful
Builds - Performing builds by hand is tedious and wasteful
Deployments - Performing deployments by hand is tedious and wasteful
