<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Surfing With Style</title>
    <link>http://surfingwithstyle.com/notes/</link>
    <description>Recent content in Notes on Surfing With Style</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jun 2020 15:21:50 -0800</lastBuildDate><atom:link href="http://surfingwithstyle.com/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DesignPatterns</title>
      <link>http://surfingwithstyle.com/notes/designpatterns/</link>
      <pubDate>Sun, 15 Dec 2019 06:33:39 -0800</pubDate>
      
      <guid>http://surfingwithstyle.com/notes/designpatterns/</guid>
      <description>Links:
Design patterns (and anti-patterns) site
Design patterns in Java tutorial
Abstract Factory- A Factory represents a &amp;quot;family&amp;quot; of objects that it can create- Everyday usage: DbProviderFactory is an abstract base class for SqlClientFactory- Everyday usage: SqlClientFactory.CreateCommand() creates instances of DbCommand- CreationalActive Record- A database table or view is wrapped into a class.- Typically, foreign key relationships will be exposed as an object instance of the appropriatetype via a property.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://surfingwithstyle.com/notes/git/</link>
      <pubDate>Sun, 15 Dec 2019 06:23:43 -0800</pubDate>
      
      <guid>http://surfingwithstyle.com/notes/git/</guid>
      <description>Links:
Git
Git Cheat Sheet
Udacity Git Commit Message Style Guide
UP-FOR-GRABS.net
First Timers Only
first-timers-only label on GitHub
&amp;ldquo;first timers only&amp;rdquo; blog post
try tackling some Git and GitHub challenges with the Git-it app
First Pull Request
A successful Git branching model
About merge conflicts
How to Version Control Your Production Machine Learning Models
Versioning Data Science
git init# print the hash of a stringecho &amp;quot;Apple Pie&amp;quot; | git hash-object --stdin -w# print the type a hash points togit cat-file &amp;amp;lt;SHA1&amp;amp;gt; -t# print the contents of the object referenced by hashgit cat-file &amp;amp;lt;SHA1&amp;amp;gt; -p# print a commit referenced by hashgit cat-file -p &amp;amp;lt;SHA1 of commit&amp;amp;gt;# get the number of objects in the repogit count-objects# create an annotated taggit tag -a mytag -m &amp;quot;I love cheesecake&amp;quot;Git Objects- Blobs- Trees- Commits- TagsA branch is a reference to a commit.</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>http://surfingwithstyle.com/notes/sql/</link>
      <pubDate>Sun, 15 Dec 2019 05:37:00 -0800</pubDate>
      
      <guid>http://surfingwithstyle.com/notes/sql/</guid>
      <description>Query steps:1. FROM: Cartesian product (cross join)2. ON: apply the ON filter (inner join)3. OUTER JOIN: add back outer rows4. WHERE5. GROUP BY6. CUBE or ROLLUP7. HAVING8. SELECT9. DISTINCT10. ORDER BY11. TOPPut all that together and it spells FOOWGRHSDOT.Three-valued logic in SQL means values can be TRUE, FALSE, or UNKNOWN (e.g. NULL &amp;gt; 0). UNKNOWN is treated as FALSE in ON, WHERE and HAVING filters.</description>
    </item>
    
    <item>
      <title>SOLID and DRY Principles</title>
      <link>http://surfingwithstyle.com/notes/solid/</link>
      <pubDate>Sun, 15 Dec 2019 05:26:37 -0800</pubDate>
      
      <guid>http://surfingwithstyle.com/notes/solid/</guid>
      <description>Links:
DevIQ SOLID Principles of Object Oriented Design
Atomiq - Code Similarity Finder
Single Responsibility Principle- Every object should have a single responsibility, and that responsibility should be entirelyencapsulated by the class. - There should never be more than one reason for a class to change.Open / Closed Principle- Software entities (classes, modules, functions, etc.) should be open for extension, butclosed for modification.- Achieved with interfaces, abstract base classes and parameters- Dont apply OCP at first- If the module changes once, accept it.</description>
    </item>
    
  </channel>
</rss>
